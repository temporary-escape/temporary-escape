name: build
on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Build - Windows'
            os: windows-latest
            vcpkg_dir: 'C:\vcpkg'
          - name: 'Build - Linux'
            os: ubuntu-latest
            vcpkg_dir: '/usr/local/share/vcpkg'
          - name: 'Build - Mac OSX'
            os: macos-latest
            vcpkg_dir: '/usr/local/share/vcpkg'

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          source /etc/lsb-release
          sudo apt-get install -y ninja-build clang libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev libc6-dev linux-libc-dev
          
          if [ "$DISTRIB_RELEASE" == "20.04" ]; then
            wget "http://ftp.us.debian.org/debian/pool/main/libu/liburing/liburing2_2.1-2_amd64.deb"
            sudo dpkg -i liburing2_2.1-2_amd64.deb
            wget "http://ftp.us.debian.org/debian/pool/main/libu/liburing/liburing-dev_2.1-2_amd64.deb"
            sudo dpkg -i liburing-dev_2.1-2_amd64.deb
          else
            sudo apt-get install liburing-dev
          fi

          which ninja

      - name: Dependencies (Mac OSX)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew install ninja llvm
          which ninja

      - name: Dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "skip"

      - name: Configure Vcpkg
        shell: bash
        run: |
          cd ${{ matrix.vcpkg_dir }}
          git fetch origin
          git reset --hard origin/master
          if [ "${{ matrix.os }}" == "windows-win64" ]; then
            ./bootstrap-vcpkg.bat
          else
            ./bootstrap-vcpkg.sh
          fi

      - name: CMake version check
        shell: bash
        run: cmake --version

      - name: Cache vcpkg directory
        uses: actions/cache@v2
        with:
          path: |
            build/vcpkg_installed
            ${{ matrix.vcpkg_dir }}/packages
          key: ${{ runner.os }}-${{ hashFiles('vcpkg.json') }}

      - name: Configure (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          mkdir -p build
          mkdir -p install

          export CC=$(which clang)
          export CXX=$(which clang++)

          cmake \
            -B ./build \
            -G "Ninja" \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install \
            -DCMAKE_MAKE_PROGRAM=$(which ninja) \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DTEMPORARY_ESCAPE_BUILD_TESTS=ON \
            -DCMAKE_TOOLCHAIN_FILE=${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake \
            .

      - name: Configure (Mac OSX)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          mkdir -p build
          mkdir -p install

          export CC=$(which clang)
          export CXX=$(which clang++)

          cmake \
            -B ./build \
            -G "Ninja" \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install \
            -DCMAKE_MAKE_PROGRAM=$(which ninja) \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DTEMPORARY_ESCAPE_BUILD_TESTS=ON \
            -DCMAKE_TOOLCHAIN_FILE=${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake \
            .

      - name: Configure (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p build
          mkdir -p install

          cmake \
            -B ./build \
            -G "Visual Studio 16 2019" -T ClangCL -A x64 \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DTEMPORARY_ESCAPE_BUILD_TESTS=ON \
            -DCMAKE_TOOLCHAIN_FILE=${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake \
            .

      - name: Archive CMake output
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Configure-Logs
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log

      - name: Compile Game
        shell: bash
        run: |
          cmake --build ./build --target TemporaryEscapeMain --config MinSizeRel

      - name: Compile Unit Tests
        shell: bash
        run: |
          cmake --build ./build --target TemporaryEscapeUnitTests --config MinSizeRel

      - name: Compile Functional Tests
        shell: bash
        run: |
          cmake --build ./build --target TemporaryEscapeFunctionalTests --config MinSizeRel

      - name: Run Tests
        shell: bash
        run: |
          cd build
          ctest -C MinSizeRel --verbose --output-on-failure 2>&1 | tee ctest.log

      - name: Archive Tests output
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Tests-Logs
          path: |
            build/ctest.log

      - name: Install and check version
        shell: bash
        run: |
          cmake --build ./build --install
          ./install/TemporaryEscape --version

      - name: Package
        shell: bash
        run: |
          cd build
          cpack -C MinSizeRel

      - name: Archive package
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Releases
          path: build/release/

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Download Hugo
        shell: bash
        run: |
          wget https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_extended_0.92.1_Linux-64bit.tar.gz
          tar xvf hugo_extended_0.92.1_Linux-64bit.tar.gz
          sudo mv ./hugo /usr/local/bin/hugo
          sudo chmod +x /usr/local/bin/hugo
          hugo version

      - name: Run Hugo
        shell: bash
        run: |
          cd docs
          hugo
      
      - name: Deploy
        if: startsWith(github.ref, 'refs/heads/master')
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ github.workspace }}/docs/public
