name: build
on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Build - Windows'
            os: 'windows-2022'
            config: 'Release'
            cpack: 'ZIP'
            configurePreset: 'ninja-msvc'
            buildPreset: 'ninja-msvc'
            vulkanSdkVer: '1.3.239.0'
            vcpkgDir: 'C:\vcpkg'

          - name: 'Build - Linux'
            os: 'ubuntu-22.04'
            config: 'Release'
            cpack: 'TGZ'
            configurePreset: 'ninja-linux'
            buildPreset: 'ninja-linux'
            vulkanSdkVer: '1.3.239.0'
            vcpkgDir: '/usr/local/share/vcpkg'

    #      - name: 'Build - Mac OSX'
    #        os: macos-latest
    #        config: 'Release'
    #        cpack: 'ZIP'
    #        configurePreset: 'ninja'
    #        buildPreset: 'ninja - ninja'

    env:
      VCPKG_BINARY_SOURCES: "${{ secrets.VCPKG_BINARY_SOURCES }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Dependencies
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y \
              ninja-build clang llvm libxinerama-dev libxcursor-dev xorg-dev \
              libglu1-mesa-dev libc6-dev linux-libc-dev liburing-dev
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install ninja llvm
          fi

      - name: Configure Vcpkg
        shell: bash
        run: |
          cd ${{ matrix.vcpkgDir }}
          git fetch origin
          git reset --hard 69efe9cc2df0015f0bb2d37d55acde4a75c9a25b
          if [ "$RUNNER_OS" == "Windows" ]; then
            ./bootstrap-vcpkg.bat
          else
            ./bootstrap-vcpkg.sh
          fi

      - name: Setup Vulkan - Windows
        if: runner.os == 'Windows'
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/${{ matrix.vulkanSdkVer }}/windows/VulkanSDK-${{ matrix.vulkanSdkVer }}-Installer.exe" -OutFile VulkanSDK.exe
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/${{ matrix.vulkanSdkVer }}/windows/VulkanRT-${{ matrix.vulkanSdkVer }}-Installer.exe" -OutFile VulkanRT.exe
          .\VulkanSDK.exe --root C:\VulkanSDK  --accept-licenses --default-answer --confirm-command install
          .\VulkanRT.exe /S
          Remove-Item .\VulkanSDK.exe

      - name: Setup Vulkan - Linux
        if: runner.os == 'Linux'
        run: |
          wget -O vulkansdk.tar.gz -q https://sdk.lunarg.com/sdk/download/${{ matrix.vulkanSdkVer }}/linux/vulkansdk-linux-x86_64-${{ matrix.vulkanSdkVer }}.tar.gz
          tar -xzf vulkansdk.tar.gz
          sudo mv ./${{ matrix.vulkanSdkVer }}/ /opt/vulkan-sdk
          rm vulkansdk.tar.gz

      - name: Cache vcpkg directory
        uses: actions/cache@v3
        with:
          path: |
            build/vcpkg_installed
            ${{ matrix.vcpkgDir }}/packages
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}

      - name: Configure - Windows
        if: runner.os == 'Windows'
        env:
          VCPKG_ROOT: "${{ matrix.vcpkgDir }}"
          VULKAN_SDK: "C:/VulkanSDK"
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake --preset "${{ matrix.configurePreset }}" -DCMAKE_BUILD_TYPE=Release -DVCPKG_BUILD_TYPE=release -DTEMPORARY_ESCAPE_BUILD_TESTS=ON

      - name: Configure - Linux
        if: runner.os == 'Linux'
        env:
          VCPKG_ROOT: "${{ matrix.vcpkgDir }}"
        shell: bash
        run: |
          source /opt/vulkan-sdk/setup-env.sh
          cmake --preset "${{ matrix.configurePreset }}" -DCMAKE_BUILD_TYPE=Release -DVCPKG_BUILD_TYPE=release -DTEMPORARY_ESCAPE_BUILD_TESTS=ON

      - name: Build
        shell: bash
        run: |
          cmake --build --preset "${{ matrix.buildPreset }}" --parallel --target all

      - name: Package
        shell: bash
        run: |
          cmake --build --preset "${{ matrix.buildPreset }}" --target package

      - name: AppImage
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O /usr/local/bin/appimagetool
          sudo chmod +x /usr/local/bin/appimagetool
          TAR_GZ_FILE=$(ls ./build/release/*.tar.gz | head -n1)
          ./appimage/build.sh ${TAR_GZ_FILE}

      - name: Unit Test
        shell: bash
        run: |
          cd ./build
          ctest --config Release --verbose

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.os }}-archive
          path: ./build/release
          if-no-files-found: error
          retention-days: 2

  publish:
    name: Publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || contains(github.ref, 'refs/tags/v')
    
    needs:
      - build

    env:
      AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      AWS_DEFAULT_REGION: "${{ secrets.AWS_DEFAULT_REGION }}"
      AWS_ENDPOINT_URL: "${{ secrets.AWS_ENDPOINT_URL }}"
      AWS_BUCKET_NAME: "${{ secrets.AWS_BUCKET_NAME }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-windows-2022-archive
          path: ./release

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-ubuntu-22.04-archive
          path: ./release

      - name: Upload to S3
        shell: bash
        run: |
          VERSION=$(git describe --always --tags)
          aws --endpoint "https://${AWS_ENDPOINT_URL}" s3 cp ./release "s3://${AWS_BUCKET_NAME}/release/${VERSION}/" --recursive --acl public-read

  pages:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || contains(github.ref, 'refs/tags/v')

    needs:
      - publish

    env:
      AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      AWS_DEFAULT_REGION: "${{ secrets.AWS_DEFAULT_REGION }}"
      AWS_ENDPOINT_URL: "${{ secrets.AWS_ENDPOINT_URL }}"
      AWS_BUCKET_NAME: "${{ secrets.AWS_BUCKET_NAME }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false
          fetch-depth: 1

      - name: Dependencies
        run: |
          wget https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_extended_0.92.1_Linux-64bit.tar.gz
          tar xvf hugo_extended_0.92.1_Linux-64bit.tar.gz
          sudo mv ./hugo /usr/local/bin/hugo
          sudo chmod +x /usr/local/bin/hugo
          hugo version
          
          sudo python3 -m pip install boto3

      - name: Generate
        run: |
          cd docs
          make default

      - name: Clone temporary-escape.github.io
        if: startsWith(github.ref, 'refs/heads/master')
        uses: actions/checkout@v3
        with:
          repository: temporary-escape/temporary-escape.github.io
          ssh-key: ${{ secrets.DOCS_DEPLOY_TOKEN }}
          path: docs-git

      - name: Push
        if: startsWith(github.ref, 'refs/heads/master')
        shell: bash
        run: |
          rm -rf ${{ github.workspace }}/docs-git/*
          cp -rv ${{ github.workspace }}/docs/public/* ${{ github.workspace }}/docs-git/
          
          cd docs-git
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "Update documentation" --allow-empty
          git push origin main -f
