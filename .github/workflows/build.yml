name: build
on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Build - Windows'
            os: 'windows-2022'
            config: 'Release'
            configurePreset: 'ninja-msvc'
            buildPreset: 'ninja-msvc'

          - name: 'Build - Linux'
            os: 'ubuntu-22.04'
            config: 'Release'
            configurePreset: 'ninja-linux'
            buildPreset: 'ninja-linux'

          - name: 'Build - macOS'
            os: 'macos-12'
            config: 'Release'
            configurePreset: 'ninja-macos'
            buildPreset: 'ninja-macos'

    env:
      AWS_ACCESS_KEY_ID: "${{ secrets.VCPKG_CACHE_AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.VCPKG_CACHE_AWS_SECRET_ACCESS_KEY }}"
      AWS_DEFAULT_REGION: "${{ vars.VCPKG_CACHE_AWS_DEFAULT_REGION }}"
      VCPKG_BINARY_SOURCES: "${{ vars.VCPKG_BINARY_SOURCES }}"
      VCPKG_USE_SYSTEM_BINARIES: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Dependencies
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y \
              ninja-build clang llvm libxinerama-dev libxcursor-dev xorg-dev \
              libglu1-mesa-dev libc6-dev linux-libc-dev liburing-dev libfuse2
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install pkg-config llvm cmake ninja
          fi

      - name: Configure - Windows
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake --preset "${{ matrix.configurePreset }}" -DCMAKE_BUILD_TYPE=Release -DVCPKG_BUILD_TYPE=release ^
            -DTEMPORARY_ESCAPE_BUILD_TESTS=ON ^
            "-DCMAKE_C_COMPILER=C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/Llvm/x64/bin/clang-cl.exe" ^
            "-DCMAKE_CXX_COMPILER=C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/Llvm/x64/bin/clang-cl.exe"

      - name: Configure - Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cmake --preset "${{ matrix.configurePreset }}" -DCMAKE_BUILD_TYPE=Release -DVCPKG_BUILD_TYPE=release -DTEMPORARY_ESCAPE_BUILD_TESTS=ON

      - name: Configure - macOS
        if: runner.os == 'macOS'
        shell: bash
        run: |
          cmake --preset "${{ matrix.configurePreset }}" -DCMAKE_BUILD_TYPE=Release -DVCPKG_BUILD_TYPE=release -DTEMPORARY_ESCAPE_BUILD_TESTS=ON

      - name: Build
        shell: bash
        run: |
          cmake --build --preset "${{ matrix.buildPreset }}" --parallel --target all

      - name: Package
        shell: bash
        run: |
          cmake --build --preset "${{ matrix.buildPreset }}" --target package

      - name: AppImage
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O /usr/local/bin/appimagetool
          sudo chmod +x /usr/local/bin/appimagetool
          TAR_GZ_FILE=$(ls ./build/release/*.tar.gz | head -n1)
          ./appimage/build.sh ${TAR_GZ_FILE}

      - name: Unit Test
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd ./build
          if [ "$RUNNER_OS" == "Windows" ]; then
            ctest --config Release --verbose
          else
            ctest --verbose
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.os }}-archive
          path: ./build/release
          if-no-files-found: error
          retention-days: 2

  publish:
    name: Publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    
    needs:
      - build

    env:
      AWS_ACCESS_KEY_ID: "${{ secrets.RELEASES_AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.RELEASES_AWS_SECRET_ACCESS_KEY }}"
      AWS_DEFAULT_REGION: "${{ vars.RELEASES_AWS_DEFAULT_REGION }}"
      AWS_ENDPOINT_URL: "${{ vars.RELEASES_AWS_ENDPOINT_URL }}"
      AWS_BUCKET_NAME: "${{ vars.RELEASES_AWS_BUCKET_NAME }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-windows-2022-archive
          path: ./release

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-ubuntu-22.04-archive
          path: ./release

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-macos-12-archive
          path: ./release

      - name: Upload to S3
        shell: bash
        run: |
          VERSION=$(git describe --always --tags)
          aws --endpoint "https://${AWS_ENDPOINT_URL}" s3 cp ./release "s3://${AWS_BUCKET_NAME}/release/${VERSION}/" --recursive --acl public-read

  pages:
    name: Documentation
    runs-on: ubuntu-latest

    needs:
      - publish

    env:
      AWS_ACCESS_KEY_ID: "${{ secrets.RELEASES_AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.RELEASES_AWS_SECRET_ACCESS_KEY }}"
      AWS_DEFAULT_REGION: "${{ vars.RELEASES_AWS_DEFAULT_REGION }}"
      AWS_ENDPOINT_URL: "${{ vars.RELEASES_AWS_ENDPOINT_URL }}"
      AWS_BUCKET_NAME: "${{ vars.RELEASES_AWS_BUCKET_NAME }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false
          fetch-depth: 1

      - name: Dependencies
        run: |
          cd docs
          sudo python3 -m pip install -r requirements.txt

      - name: Generate
        run: |
          cd docs
          make html

      - name: Clone temporary-escape.github.io
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
        uses: actions/checkout@v3
        with:
          repository: temporary-escape/temporary-escape.github.io
          ssh-key: ${{ secrets.DOCS_DEPLOY_TOKEN }}
          path: docs-git

      - name: Push
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          rm -rf ${{ github.workspace }}/docs-git/*
          cp -rv ${{ github.workspace }}/docs/build/html/* ${{ github.workspace }}/docs-git/
          
          cd docs-git
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "Update documentation" --allow-empty
          git push origin main -f
