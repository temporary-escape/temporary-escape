cmake_minimum_required(VERSION 3.11)
set(CMAKE_MODULE_PATH
        "${CMAKE_CURRENT_LIST_DIR}/modules"
        )

execute_process(COMMAND git describe --always
        OUTPUT_VARIABLE VERSION_STRING
        OUTPUT_STRIP_TRAILING_WHITESPACE
        RESULT_VARIABLE VERSION_STRING_RET
        )
if (VERSION_STRING_RET EQUAL "0")
    string(REGEX REPLACE "^v([0-9]+)\\..*" "\\1" VERSION_MAJOR "${VERSION_STRING}")
    string(REGEX REPLACE "^v[0-9]+\\.([0-9]+).*" "\\1" VERSION_MINOR "${VERSION_STRING}")
    string(REGEX REPLACE "^v[0-9]+\\.[0-9]+\\.([0-9]+).*" "\\1" VERSION_PATCH "${VERSION_STRING}")
    string(REGEX REPLACE "^v[0-9]+\\.[0-9]+\\.[0-9]+(.*)" "\\1" VERSION_SHA1 "${VERSION_STRING}")
    set(PROJECT_VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
else ()
    set(VERSION_STRING "v0.0.1")
    set(PROJECT_VERSION "0.0.1")
endif ()

project(TemporaryEscape VERSION "${PROJECT_VERSION}")

option(TEMPORARY_ESCAPE_BUILD_TESTS "Build with tests" OFF)
option(TEMPORARY_ESCAPE_LLVM_SYMBOLIZER_PATH "Path to the llvm-symbolizer to enable address sanitizer" FALSE)

if (UNIX)
    find_package(ZLIB REQUIRED)
    find_package(LibLZMA REQUIRED)
    find_package(unofficial-libuuid CONFIG REQUIRED)
    add_compile_options(-ftemplate-backtrace-limit=0)
    if (APPLE)
        find_package(Iconv)
    endif ()
else ()
    add_compile_options(/EHsc)
    add_compile_options(/wd4251)
endif ()

find_package(glfw3 CONFIG REQUIRED)
find_package(glm CONFIG REQUIRED)
find_package(glad CONFIG REQUIRED)
find_package(fmt REQUIRED)
find_package(NanoVG REQUIRED)
find_package(Png REQUIRED)
find_package(Cgltf REQUIRED)
find_package(msgpack CONFIG REQUIRED)
find_package(asio CONFIG REQUIRED)
find_package(Nuklear REQUIRED)
find_package(Stb REQUIRED)
find_package(Catch2 CONFIG REQUIRED)
find_package(spdlog CONFIG REQUIRED)
find_package(cxxopts CONFIG REQUIRED)
find_package(freetype CONFIG REQUIRED)
find_package(Wren REQUIRED)
find_package(WrenBind17 REQUIRED)
find_package(RocksDB CONFIG REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(OpenAL CONFIG REQUIRED)
find_package(yaml-cpp CONFIG REQUIRED)

if (UNIX)
    if (APPLE)
        set(CMAKE_INSTALL_RPATH "@executable_path")
    else ()
        set(CMAKE_INSTALL_RPATH "$ORIGIN")
    endif ()
endif ()

add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/src)

if (TEMPORARY_ESCAPE_BUILD_TESTS)
    enable_testing()
    add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/test)
endif ()

install(DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/assets" DESTINATION ".")
install(DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/shaders" DESTINATION ".")

set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY ON)
set(CPACK_OUTPUT_FILE_PREFIX "release")
if (MSVC)
    set(CPACK_GENERATOR "ZIP" CACHE STRING "Generators to support")
else ()
    set(CPACK_GENERATOR "ZIP;TGZ" CACHE STRING "Generators to support")
endif ()
set(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${VERSION_STRING}-${CMAKE_SYSTEM_NAME}")
include(CPack)
